parameters:
  - name: environmentName
  - name: globalTerraformVariableFilename
  - name: pathToTerraformDirectory
  - name: pathToTerraformEnvironmentVariablesDirectory
  
steps:
  - task: TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: 1.0.0
  - bash: terraform init
    displayName: Terraform - Initialize
    workingDirectory: ${{ parameters.pathToTerraformDirectory }}
    env:
      ARM_CLIENT_ID: $(ArmClientId)
      ARM_CLIENT_SECRET: $(ArmClientSecret)
  - bash: terraform workspace select ${{ parameters.environmentName }} 
    displayName: Checkout Terraform workspace - ${{ parameters.environmentName }}
    workingDirectory: ${{ parameters.pathToTerraformDirectory }}
    env:
      ARM_CLIENT_ID: $(ArmClientId)
      ARM_CLIENT_SECRET: $(ArmClientSecret)
  - bash: terraform validate 
    displayName: Terraform - Validate
    workingDirectory: ${{ parameters.pathToTerraformDirectory }}
    env:
      ARM_CLIENT_ID: $(ArmClientId)
      ARM_CLIENT_SECRET: $(ArmClientSecret)
  - bash: |
      terraform plan \
      -var-file=${{ parameters.pathToTerraformEnvironmentVariablesDirectory }}/${{ parameters.globalTerraformVariableFilename }}.tfvars \
      -var-file=${{ parameters.pathToTerraformEnvironmentVariablesDirectory }}/${{ parameters.environmentName }}.tfvars \
      -var "SQLSERVERADMINUSERNAME=$(TF_VAR_SQLSERVERADMINUSERNAME)" \
      -var "SQLSERVERADMINPASSWORD=$(TF_VAR_SQLSERVERADMINPASSWORD)" \
      -var "WEBAPPCLIENTSECRET=$(TF_VAR_WEBAPPCLIENTSECRET)" \
      -input=false \
      -out tfplan
    displayName: Terraform - Plan
    workingDirectory: ${{ parameters.pathToTerraformDirectory }}
    env:
      ARM_CLIENT_ID: $(ArmClientId)
      ARM_CLIENT_SECRET: $(ArmClientSecret)
  - bash: |
      terraform apply \
      -input=false \
      tfplan
    displayName: Terraform - Apply
    workingDirectory: ${{ parameters.pathToTerraformDirectory }}
    env:
      ARM_CLIENT_ID: $(ArmClientId)
      ARM_CLIENT_SECRET: $(ArmClientSecret)
  - powershell: |
      $terraformOutput = Get-Content "$(terraformApply.jsonOutputVariablesPath)" | ConvertFrom-Json
      $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
    name: terraformOutput
    displayName: Read Terraform outputs