parameters:
  - name: backendAzureRmContainerName
  - name: backendAzureRmKey
  - name: backendAzureRmResourceGroupName
  - name: backendAzureRmStorageAccountName
  - name: backendServiceArm
  - name: environmentName
  - name: environmentServiceNameAzureRM
  - name: globalTerraformVariableFilename
  - name: pathToTerraformDirectory
  - name: pathToTerraformVariableDirectory
  
steps:
  - task: TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: 1.0.0
  - task: TerraformTaskV2@2
    displayName: Terraform - Initialize
    inputs:
      command: init
      workingDirectory: ${{ parameters.pathToTerraformDirectory }}
      backendServiceArm: ${{ parameters.backendServiceArm }}
      backendAzureRmResourceGroupName: ${{ parameters.backendAzureRmResourceGroupName }}
      backendAzureRmStorageAccountName: ${{ parameters.backendAzureRmStorageAccountName }}
      backendAzureRmContainerName: ${{ parameters.backendAzureRmContainerName }}
      backendAzureRmKey: ${{ parameters.backendAzureRmKey }}
  - bash: |
      cd ${{ parameters.pathToTerraformDirectory }}
      terraform workspace select ${{ parameters.environmentName }} 
    displayName: Checkout Terraform workspace - ${{ parameters.environmentName }}
  - task: TerraformTaskV2@2
    displayName: Terraform - Validate
    inputs:
      command: validate
      workingDirectory: ${{ parameters.pathToTerraformDirectory }}
      backendServiceArm: ${{ parameters.backendServiceArm }}
      backendAzureRmResourceGroupName: ${{ parameters.backendAzureRmResourceGroupName }}
      backendAzureRmStorageAccountName: ${{ parameters.backendAzureRmStorageAccountName }}
      backendAzureRmContainerName: ${{ parameters.backendAzureRmContainerName }}
      backendAzureRmKey: ${{ parameters.backendAzureRmKey }}
  - task: TerraformTaskV2@2
    name: terraformApply
    displayName: Terraform - Apply
    inputs:
      command: apply
      workingDirectory: ${{ parameters.pathToTerraformDirectory }}
      commandOptions: |
        -var-file=${{ parameters.pathToTerraformDirectory }}/environments/${{ parameters.globalTerraformVariableFilename }}.tfvars -var-file=${{ parameters.pathToTerraformDirectory }}/environments/${{ parameters.environmentName }}.tfvars -var "SQLSERVERADMINUSERNAME=$(TF_VAR_SQLSERVERADMINUSERNAME)" -var "SQLSERVERADMINPASSWORD=$(TF_VAR_SQLSERVERADMINPASSWORD)" -var "WEBAPPCLIENTSECRET=$(TF_VAR_WEBAPPCLIENTSECRET)"
      backendServiceArm: ${{ parameters.backendServiceArm }}
      backendAzureRmResourceGroupName: ${{ parameters.backendAzureRmResourceGroupName }}
      backendAzureRmStorageAccountName: ${{ parameters.backendAzureRmStorageAccountName }}
      backendAzureRmContainerName: ${{ parameters.backendAzureRmContainerName }}
      backendAzureRmKey: ${{ parameters.backendAzureRmKey }}
      environmentServiceNameAzureRM: ${{ parameters.environmentServiceNameAzureRM }}
  - powershell: |
      $terraformOutput = Get-Content "$(terraformApply.jsonOutputVariablesPath)" | ConvertFrom-Json
      $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
    name: terraformOutput
    displayName: Read Terraform outputs